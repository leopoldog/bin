#!/bin/bash

FILE="$1"
AVAILABLE_LETTERS="abcdefghijklmnopqrstuvwxyz"
LF=$'\n'

help()
{
  if [ ! -z "$*" ]
  then
    echo >&2
    echo "$@" >&2
  fi

  cat <<! >&2

Usage: $0 <filename>

Where the filename contains a sequence of words in binary to analyze with the Quine-McCluskey method.
Example:
  a file containing:
	0001
	0101
	0110
	0111
	1101
	1111

  will return the following prime implicants:
	0-01
	011-
	-1-1

  and the corrisponding algebric formula:
	!a!cd + !abc + bd

Warning: The Quine-McCluskey algorithm is NP-hard, so be careful with the number of variables.
         The maximum allowed for this program is ${#AVAILABLE_LETTERS}.

!
  exit -1
}

if [ -z "$FILE" ]
then
  help
fi

TEMP_FILE=$(mktemp)

trap "\\echo BREAK;\\rm -f ${TEMP_FILE}; exit" 2 3 15

getPotentialPrimeImplicant()
{
  local position="$1"
  local element="$2"

  if [ "x${element:position:1}x" == "x0x" ]
  then
    echo "${element:0:position}[01]${element:position+1}"
  fi
}

checkIfToRetain()
{
  local possibility="$1"
  local elements="$2"

  return $[ $(echo "$elements" | grep -- "$possibility" | wc -l) != 2 ]
}

getAllPrimeImplicants()
{
  local elements=$1

  for element in $elements
  do
    for p in $(seq 0 $[width-1])
    do
      possibility=$(getPotentialPrimeImplicant $p "$element")

      if checkIfToRetain "$possibility" "$elements"
      then
        echo "$possibility"
      fi
    done
  done
}

printAlgebricRepresentation()
{
  local elements=$1

  for element in $elements
  do
    for p in $(seq 0 $(echo "${#element}"))
    do
      if [ "x${element:p:1}x" == "x0x" ]
      then
        echo -n "!${AVAILABLE_LETTERS:p:1}"
      elif [ "x${element:p:1}x" == "x1x" ]
      then
        echo -n "${AVAILABLE_LETTERS:p:1}"
      fi
    done

    echo -n " + "
  done \
  | sed "s/ + $//"

  echo
}

printPrimeImplicants()
{
  local primeImplicants=( $@ )

  echo -e "\t${AVAILABLE_LETTERS:0:width}" "${primeImplicants[@]}" | sed "s/ /\n\t/g"
}

getAllEssentialImplicants()
{
  local allPrimeImplicants=( $@ )
  local lines=$(sed -n "s/^[01]\+ \(O*\)XO*$/\1/p" "$TEMP_FILE" \
                | awk '{print length}' \
                | sort -u)

  for line in $lines
  do
    echo "${allPrimeImplicants[line]}"
    matcher=$(printf "%${line}s" | tr " " ".")
    sed -i "/^[01]\+ ${matcher}X.*/ d" "$TEMP_FILE"
  done
}

getAllOptionalImplicants()
{
  local allPrimeImplicants=( $1 )
  local essentialPrimeImplicants=( $2 )
  local allElements="$3"

  if [ "${allPrimeImplicants[*]}" != "${essentialPrimeImplicants[*]}" -a ! -z "$allElements" ]
  then
    let n=-1
    let max=-1
    let found=$(echo "$allElements" \
                | sed "s/^[01]* //;s/\([OX]\)/ \1/g" \
                | rs -c' ' -T \
                | sed "s/[ O]//g" \
                | while read line
                  do
                    if [ $max -lt ${#line} ]
                    then
                      max=${#line}
                      echo $n
                    fi
                    let n=n+1
                  done \
                | tail -n 1)

    if [ $found -ge 0 ]
    then
      new="${allPrimeImplicants[found]}"
      echo "$new"
      matcher=$(printf "%${found}s" | tr " " ".")
      allElements="$(echo "$allElements" | grep -v "^[01]\+ ${matcher}X.*")"
      getAllOptionalImplicants "${allPrimeImplicants[*]}" "${essentialPrimeImplicants[*]}"$'\n'"$new" "$allElements"
    fi
  fi
}

prepareTempFile()
{
  local allPrimeImplicants=( $1 )
  local allPossibilities="$(echo "$2" | sed "s/ //g;s/$/ /")"
  local lines="$allPossibilities"

  for primeImplicant in "${allPrimeImplicants[@]}"
  do
    lines="${lines//$LF/O$LF}O"

    for line in $(echo "$allPossibilities" \
                  | grep -w "${primeImplicant//-/[01]}")
    do
      lines="$(echo "$lines" | sed "s/\(${line}.*\)O/\1X/")"
    done
  done

  echo "$lines"
}

getFileWidth()
{
  local allElements="$1"
  local width=$(echo "$allElements" \
                | awk "{print length}" \
                | sort -u)
  local single=$[ $(echo "$width" | wc -l) == 1 ]

  echo "$width"

  return $single
}

cleanFile()
{
  local file="$1"

  sed "s/[^01]//g" "$file" \
  | sort -u \
  | grep -v "^$"
}

replace01WithDash()
{
  local primeImplicants="$1"

  echo "${primeImplicants}" \
  | sed "s/\\[01\\]/-/g"
}

takeAllUncoveredElements()
{
  local allElements="$1"
  local primeImplicants="$2"
  local grepExpression=$(echo "$primeImplicants" \
                         | tr "\n" "|" \
                         | sed "s/|/\\\\|/g")

  echo "$allElements" \
  | grep -v -- "^\\($grepExpression\\)$"
}

allPossibilities=$(cleanFile "$FILE")
width=$(getFileWidth "$allPossibilities")

if [ $? -eq 0 ]
then
  help "All the elements must have the same width!"
fi 

newElements="$allPossibilities"

while [ "$elements" != "$newElements" ]
do
  elements=$(echo "$newElements" | sort -u)
  echo "Number of elements to analyze: $(echo "$elements" | wc -l)"
  primeImplicants="$(getAllPrimeImplicants "$elements")"
  newElements=$(replace01WithDash "$primeImplicants"
                takeAllUncoveredElements "$elements" "$primeImplicants")
done

allPrimeImplicants="$(echo "$newElements" | grep -v "^$" | sort -u)"
prepareTempFile "$allPrimeImplicants" "$allPossibilities" > "$TEMP_FILE"
essentialPrimeImplicants=$(getAllEssentialImplicants "$allPrimeImplicants")
optionalPrimeImplicants=$(getAllOptionalImplicants "$allPrimeImplicants" "$essentialPrimeImplicants" "$(cat "$TEMP_FILE")")

if [ ! -z "$essentialPrimeImplicants" ]
then
  echo
  echo "Essential prime implicants obtained:"

  printPrimeImplicants "$essentialPrimeImplicants"
fi

if [ ! -z "$optionalPrimeImplicants" ]
then
  echo
  echo "Optional prime implicants obtained:"

  printPrimeImplicants "$optionalPrimeImplicants"
fi

echo
echo "Algebric formula:"

if [ ! -z "$essentialPrimeImplicants" ]
then
  echo -en "\t"
  printAlgebricRepresentation "$essentialPrimeImplicants"
  plus="+ "
else
  plus=""
fi

if [ ! -z "$optionalPrimeImplicants" ]
then
  echo -en "\t$plus"
  printAlgebricRepresentation "$optionalPrimeImplicants"
fi

echo
echo "Please analyze the eventual algebric simplifications manually!"
echo

\rm -f "$TEMP_FILE"
