#!/bin/bash

PROGRAM_NAME=$(basename "$0")
CONF_DIR=~/".rdesktop"
LOCK_FILE="${CONF_DIR}.lock"
MENU_DIR_LOCAL=~/".local/share/applications"
MENU_DIR_CONFIG=~/".config/menus"
DESKTOP_DIR=~/".local/share/desktop-directories"
SECURE_DIR=~/"secure"
MENU_FILENAME="remote-access.menu"
DIR_FILENAME="remote-access.directory"

if [ -z "$GIO_LAUNCHED_DESKTOP_FILE_PID" ]
then
  INTERACTIVE=1
else
  INTERACTIVE=0
fi

# check dependencies
for def in $PROGRAM_NAME ssh sshpass ssh-copy-id xmlstarlet nmap arp rdesktop gxmessage plock vncviewer terminal:gnome-terminal,mate-terminal xrandr xwininfo notify-send crudini
do
  VAR_NAME=$(echo ${def/:*/} | sed "s/-//g" | tr "[:lower:]" "[:upper:]")

  for cmd in $(echo ${def/*:/} | tr "," " ")
  do
    TEMP=$(which $cmd)
    eval "$VAR_NAME=\"$TEMP\""
  done

  if [ ! -x "$TEMP" ]
  then
    echo "${def/*:} missing!" | sed "s/,/ and /g"
    exit -1
  fi
done

RDP_TOP_PANEL=( $($XWININFO -tree -root | grep "Bottom Panel\|Pannello inferiore" | sed "s/ *\(0x[[:alnum:]]\+\) .*/\1/" | while read id; do $XWININFO -id $id | sed -n "s/ *\(Width\|Height\): //p"; done) )
RDP_BOTTOM_PANEL=( $($XWININFO -tree -root | grep "Top Panel\|Pannello superiore" | sed "s/ *\(0x[[:alnum:]]\+\) .*/\1/" | while read id; do $XWININFO -id $id | sed -n "s/ *\(Width\|Height\): //p"; done) )

getGeometry()
{
  local WIN_SIZE
  local display="$1"
  local position="$2"

  if [ "$display" == "full" ]
  then
    WIN_SIZE=$(echo $($XWININFO -root \
                      | sed -n "s/ *\(Width\|Height\): //p") 0 0)
  else
    WIN_SIZE=$($XRANDR -q \
               | grep -w "connected" \
               | grep "^$display" \
               | sed -n "s/.*connected[[:space:]]*\(primary\)\?[[:space:]]\+\([0-9]*\)x\([0-9]*\)+\([0-9]*\)+\([0-9]*\)[[:space:]].*/\2 \3 \4 \5 \1/p" \
               | sort -rk5)
  fi

  echo "${WIN_SIZE[*]}" | grep -qw primary
  with_primary=$?

  echo "$WIN_SIZE" \
  | while read x y sx sy primary
    do
      if [ "$primary" == "primary" -o "$with_primary" == 1 ]
      then
        let y=y-RDP_TOP_PANEL[1]-RDP_BOTTOM_PANEL[1]
        let sy=sy+RDP_TOP_PANEL[1]
      fi
      echo $[ x - position ]x${y}+$[ sx + position ]+${sy}
    done \
  | uniq \
  | head -n1
}

getMacViaSSH()
{
  local CN="$1"
  local IP_ADDRESS="$2"
  local TEMP_FILE="$(mktemp -u)"

  if [ -z "$OPASSWORD" ]
  then
    $SSH -oBatchMode=yes -oUserKnownHostsFile=/dev/null -oStrictHostKeyChecking=no -nq ${CN} "/sbin/ip addr show primary || /bin/ip addr show primary || /sbin/esxcfg-info -n" > "$TEMP_FILE" 2>&1
  else
    $SSHPASS "$OPASSWORD" $SSH -oBatchMode=yes -oUserKnownHostsFile=/dev/null -oStrictHostKeyChecking=no -nq ${CN} "/sbin/ip addr show primary || /bin/ip addr show primary || /sbin/esxcfg-info -n" > "$TEMP_FILE" 2>&1
  fi

  grep -q "not found" "$TEMP_FILE"

  if [ $? -eq 1 ]
  then
    sed "s/^\([^[:space:]]\)/+++\1/g" "$TEMP_FILE" \
    | tr "\n" " " \
    | sed "s/+++/\n/g" \
    | sed -n "s;.*link/ether *\([^[:space:]]\+\) .*${IP_ADDRESS}.*;\1;p"
  else
    cat "$TEMP_FILE" \
    | tr "\n" " " \
    | sed "s/VmKernel Nic/\nVmKernel Nic/g;s/\<\(${IP_ADDRESS}\)\>/\1\n/g" \
    | grep "\<${IP_ADDRESS}\>" \
    | sed "s/.*Mac Address\.*\([0-9a-f:]*\)[[:space:]].*/\1/g" \
    | sort -u \
    | head -n 1
  fi

  rm -f "$TEMP_FILE"

  return 0
}

checkMacViaSSH()
{
  local CN="$1"
  local MAC="$2"

  if [ -z "$OPASSWORD" ]
  then
    $SSH -oBatchMode=yes -oUserKnownHostsFile=/dev/null -oStrictHostKeyChecking=no -nq ${CN} "/sbin/ip addr show primary || /sbin/esxcfg-nics -l" \
    | grep "\<\(${MAC}\)\>"
  else
    $SSHPASS "$OPASSWORD" $SSH -oBatchMode=yes -oUserKnownHostsFile=/dev/null -oStrictHostKeyChecking=no -nq ${CN} "/sbin/ip addr show primary || /sbin/esxcfg-nics -l" \
    | grep "\<\(${MAC}\)\>"
  fi
}

help()
{
  if [ ! -z "$1" ]
  then
    MSG="
$PROGRAM_NAME: $1
"
  fi

  MSG="$MSG
Usage:
  $PROGRAM_NAME [ -h0wluf ] [ -s <screen> ] [ -p <position> ] <alias> [ <username> ]
  $PROGRAM_NAME [ -h0wluf ] [ -s <screen> ] [ -p <position> ] -a <menu>

Open an rdp session to the specified host

Options:
  -0              Open a console session

  -s <screen>     Open on the specified screen

  -l              Lists the available screens (for use with s option) and environments (for use with a option)

  -w              Open a wide screen spawning on both displays (if applicable)

  -p <position>   Use the specified position as left side of the window

  -h              Print this help

  -u              Regenerate the list in the .local directory (this option only regenerates the files then stops execution)

  -a <menu>       Open all machines specified in the given menu name

  -f              Full screen (ignore menu bars height)

The directory ${CONF_DIR} contains the definitions of machines in the form:
LGHI REVISE THIS
<menu> <alias> <type> <username> <password or - > <domain or - > <hostname or IP address> <MAC address>

type is RDP, VNC or SSH depending on protocol to use (in this case username, password and domain must be set to "-".
Specify the MAC address allow searching the machine on local network even if the address has changed.
You must use IP addresses and not machines names to allow MAC scan work in all cases.
"

  echo "$MSG" >&2
  [ "$INTERACTIVE" -eq 0 ] && echo "$MSG" | $GXMESSAGE --center --title "rdp" --file -

  if [ ! -z "$1" ]
  then
    exit 1
  else
    exit 0
  fi
}

regenerate()
{
  echo "Create access description for : "

  $PLOCK -l "${LOCK_FILE}" > /dev/null 2>&1

  mkdir -p "${MENU_DIR_CONFIG}" "${MENU_DIR_LOCAL}" "${DESKTOP_DIR}" "${SECURE_DIR}" "${CONF_DIR}"
  chmod 700 "${CONF_DIR}"

  OLD_LIST=$(grep -wrl "Exec=$RDP" "${MENU_DIR_LOCAL}/${PROGRAM_NAME}@"*.desktop 2>/dev/null)

  local MENUS=$(ls -1 ${CONF_DIR}/*.conf | while read f; do echo "$(basename "$f" .conf)"; done | sort -u)

  cat > "${MENU_DIR_CONFIG}/${MENU_FILENAME}.$$" 2>/dev/null <<!
<!DOCTYPE Menu
  PUBLIC '-//freedesktop//DTD Menu 1.0//EN'
  'http://standards.freedesktop.org/menu-spec/menu-1.0.dtd'>
<Menu>
    <Name>RemoteAccess</Name>
    <Directory>remote-access.directory</Directory>
    <DirectoryDir>${HOME}/.local/share/desktop-directories</DirectoryDir>
    <AppDir>${HOME}/.local/share/applications</AppDir>
    <DefaultLayout inline="false"/>$(echo "$MENUS" | sed "s;\(.*\);<Menu>\n<Name>\1</Name>\n<Directory>\1.directory</Directory>\n<DirectoryDir>${HOME}/.local/share/desktop-directories</DirectoryDir>\n<AppDir>${HOME}/.local/share/applications</AppDir>\n<!--Entry:\1-->\n</Menu>;g")
    <Layout>
        <Merge type="menus"/>$(echo "$MENUS" | sed "s;\(.*\);<Menuname>\1</Menuname>;g")
        <Merge type="files"/>
    </Layout>
</Menu>
!

  cat > "${DESKTOP_DIR}/${DIR_FILENAME}" <<!
[Desktop Entry]
Comment=Remote Access
Comment[it_CH]=Accesso Remoto
Comment[fr_CH]=Accés Distant
Encoding=UTF-8
Icon=application-x-remote-connection
Icon[it_CH]=application-x-remote-connection
Icon[fr_CH]=application-x-remote-connection
Name=Remote Access
Name[it_CH]=Accesso Remoto
Name[fr_CH]=Accés Distant
Type=Directory
Version=1.0
NoDisplay=false
!

  for MENU in $MENUS
    do
      FILENAME="${DESKTOP_DIR}/${MENU}.directory"

      if [ ! -z "${MENU}" -a ! -f "${FILENAME}" ]
      then
        cat > "${FILENAME}" <<!
[Desktop Entry]
Encoding=UTF-8
Icon=folder
Icon[it_CH]=folder
Icon[fr_CH]=folder
Type=Directory
Version=1.0
Name[it_CH]=${MENU}
Name[fr_CH]=${MENU}
Name=${MENU}
Comment[it_CH]=${MENU}
Comment[fr_CH]=${MENU}
Comment=${MENU}
!
      fi
    done

  LIST=$(for MENU in $MENUS
         do
           $CRUDINI --get "${CONF_DIR}/${MENU}.conf" \
           | while read ALIAS
             do
               PROTOCOL="$($CRUDINI --get "${CONF_DIR}/${MENU}.conf" "$ALIAS" protocol 2>/dev/null)"
               WIDE="$($CRUDINI --get "${CONF_DIR}/${MENU}.conf" "$ALIAS" wide 2>/dev/null)"

               if [ ! -z "$ALIAS" ]
               then
                 if [ "$PROTOCOL" == "RDP" ]
                 then
                   ICON="application-x-remote-connection"
                 elif [ "$PROTOCOL" == "VNC" ]
                 then
                   ICON="application-x-vnc"
                 elif [ "$PROTOCOL" == "SSH" ]
                 then
                   ICON="utilities-terminal"
                 fi

                 NAME[0]="${ALIAS}"
                 OPT[0]="${ALIAS}"

                 if [ "$WIDE" == "true" ]
                 then
                   NAME[1]="${ALIAS}(wide)"
                   OPT[1]="-w ${ALIAS}"
                 else
                   NAME[1]=""
                   OPT[1]=""
                 fi

                 for i in 0 1
                 do
                   FILENAME="${MENU_DIR_LOCAL}/${PROGRAM_NAME}@${MENU}#${NAME[i]}.desktop"
                   LIST="$LIST $FILENAME"

                   if [ -z "${NAME[i]}" ]
                   then
                     break
                   fi

                   echo "${FILENAME}"

                   ed -s "${MENU_DIR_CONFIG}/${MENU_FILENAME}.$$" >&2 <<!
,s;\(<!--Entry:${MENU}-->\);<Include><Filename>$(basename ${FILENAME})</Filename></Include>\1;g
wq
!

                   cat > "${FILENAME}" <<!
[Desktop Entry]
Categories=RemoteAccess;
Comment=
Exec=$RDP ${OPT[i]}
GenericName=
Hidden=false
Icon=${ICON}
Name=${NAME[i]}
NoDisplay=false
Path=
StartupNotify=true
Terminal=0
TerminalOptions=
Type=Application
X-KDE-SubstituteUID=false
X-KDE-Username=
!
                 done
               fi
             done
         done)

  echo "$LIST
$OLD_LIST
$OLD_LIST" \
  | sort \
  | uniq -c \
  | while read op file
    do
      if [ "$f" != "$file" ]
      then
        case "$op" in
          1) echo "Created  $(basename $file)"
             ;;
          2) echo "Deleted  $(basename $file)"
             rm -f "$file"
             ;;
          3) echo "Replaced $(basename $file)"
             ;;
          *) echo "$file (INTERNAL ERROR)"
             ;;
        esac
      fi

      f="$file"
    done \
  | sort -k2

  cat "${MENU_DIR_CONFIG}/${MENU_FILENAME}.$$" > "${MENU_DIR_CONFIG}/${MENU_FILENAME}" 2>/dev/null

  rm -f "${MENU_DIR_CONFIG}/${MENU_FILENAME}.$$"

  $PLOCK -u "${LOCK_FILE}" > /dev/null 2>&1
}

checkMac()
{
  local MAC="$(echo "${1}" | sed "s/ //g;s/,/\\\\|/g")"
  local LOCALNET=$2

  MACSMB="${MAC//:/-}"
  STATUS="$(nmblookup -R -S -A $ADDRESS)"

  found=1

  echo "$STATUS" | grep -iq "MAC Address = \(${MACSMB}\)"
  if [ $? -eq 1 ]
  then
    if [ "$PROTOCOL" != "RDP" ]
    then
      CN=${USERNAME}@${ADDRESS}

      if [ -z "${OUSERNAME}" ]
      then
        CN=${ADDRESS}
      fi

      local GETMAC=$(getMacViaSSH "${CN}" "${IP_ADDRESS}")

      echo "$GETMAC" | grep -q "\($MAC\)"

      if [ "$?" -ne 0 ]
      then
        found=0
      fi
    else
      found=0
    fi
  fi

  if [ $found -eq 0 ]
  then
    IP_ADDRESS="$(echo "$STATUS" | sed -n "s/Looking up status of //p" | head -1)"

    if [ "$LOCALNET" -eq 0 ]
    then
      SCAN=( $(ip addr | sed -n "s/ *inet \([0-9./]*\) .*/\1/p" | grep -v "127\.0\.0\.1" | sort -u) )
    else
      SCAN=( $(echo $IP_ADDRESS | sed "s/\.[^.]*$/.*/g") )
    fi

    NMAPLIST=$($NMAP -n -sP "${SCAN[@]}")
    NEW_ADDR=$($ARP -n | grep -i "${MAC}" | sed -n "s/^\([^ ]*\) .*/\1/p")

    if [ -z "$NEW_ADDR" -a "$PROTOCOL" != "RDP" ]
    then
      NEW_ADDR=$($NMAP -n -p 22 --open "${SCAN[@]}" \
                 | tr "\n" " " \
                 | sed "s/\(Nmap scan report for \|Interesting ports on \|The 1 scanned port on \)/\n/g" \
                 | sed -n "s/^\([0-9.]\+\).*\(open\|closed\|filtered\).*/\1 \2/p" \
                 | while read ip_addr opened
                   do
                     if [ "$opened" == "open" ]
                     then
                       CN=${USERNAME}@${ip_addr}

                       if [ -z "${OUSERNAME}" ]
                       then
                         CN=${ip_addr}
                       fi

                       if [ "$(checkMacViaSSH "${CN}" "${MAC}")" ]
                       then
                         echo $ip_addr
                         break
                       fi
                     elif [ "$PROTOCOL" != "SSH" ]
                     then
                       nmblookup -R -S -A $ip_addr \
                       | grep -iq "MAC Address = \(${MACSMB}\)"

                       if [ $? -eq 0 ]
                       then
                         echo $ip_addr
                         break
                       fi
                     fi
                   done)
    fi

    if [ ! -z "$NEW_ADDR" -a "$IP_ADDRESS" != "$NEW_ADDR" ]
    then
      n=$(echo "$NEW_ADDR" | wc -l)
      if [ $n -gt 1 ]
      then
        MSG="Unable to find mac address for '$ALIAS', found $n correspondences.
Please specify it manually!"
        echo -e "\n\e[31m$MSG\e[0m\n" >&2
        [ "$INTERACTIVE" -eq 0 ] && $NOTIFYSEND --urgency=low --icon=error --app-name=rdp "$MSG"
        NEW_ADDR=$ADDRESS
      else
        $PLOCK -l "${LOCK_FILE}" > /dev/null 2>&1
        echo "Update configuration file ${CONF_DIR}/${MENU}.conf" >&2
        $CRUDINI --set "${CONF_DIR}/${MENU}.conf" "$ALIAS" address "$NEW_ADDR"
        $CRUDINI --set "${CONF_DIR}/${MENU}.conf" "$ALIAS" mac "$MAC"
        $PLOCK -u "${LOCK_FILE}" > /dev/null 2>&1
      fi
    fi

    ADDRESS=$NEW_ADDR
  fi

  if [ -z "$ADDRESS" ]
  then
    MSG="'$ALIAS' not found"
    echo "$MSG" >&2
    [ "$INTERACTIVE" -eq 0 ] && $NOTIFYSEND --urgency=low --icon=error --app-name=rdp "$MSG"
    return 2
  else
    echo "Found $ALIAS => $ADDRESS" >&2
  fi

  return 0
}

getMac()
{
  local MAC=$(nmblookup -R -S -A $ADDRESS \
              | sed -n "s/^[[:space:]]*MAC Address =[[:space:]]*\([^[:space:]]*\).*/\1/p" \
              | tr "[:upper:]-" "[:lower:]:")

  if [ -z "$MAC" -o "$MAC" == "00:00:00:00:00:00" ]
  then
    CN=${USERNAME}@${ADDRESS}

    if [ -z "${OUSERNAME}" ]
    then
      CN=${ADDRESS}
    fi

    MAC=$($ARP -n -a "${IP_ADDRESS}" \
          | sed -n "s;.*($IP_ADDRESS) at \([^ ]*\) \[ether\].*;\1;p")

    if [ -z "$MAC" ]
    then
      MAC=$(getMacViaSSH "${CN}" "${IP_ADDRESS}")
    fi
  fi

  if [ -z "$MAC" ]
  then
    echo "Unable to find MAC address" >&2
  else
    echo "Found MAC address '${MAC}'" >&2

    $PLOCK -l "${LOCK_FILE}" > /dev/null 2>&1
    echo "Update configuration file ${CONF_DIR}/${MENU}.conf" >&2
    $CRUDINI --set "${CONF_DIR}/${MENU}.conf" "$ALIAS" address "$ADDRESS"
    $CRUDINI --set "${CONF_DIR}/${MENU}.conf" "$ALIAS" mac "$MAC"
    $PLOCK -u "${LOCK_FILE}" > /dev/null 2>&1
  fi

  echo "$MAC"

  return 0
}

startViewer()
{
  local nocache=$1
  local screensize="$2"

  if [ -z "$screensize" ]
  then
    screensize="${SIZE}"
  fi

  ping -q -c 1 "$ADDRESS" > /dev/null

  if [ $? -eq 0 -a ! -z "$ADDRESS" ]
  then
    case $PROTOCOL in
      RDP)
        if [ $nocache -eq 0 ]
        then
          CACHE=
        else
          CACHE=-P
        fi
        $RDESKTOP -T${ALIAS} ${OUSERNAME} ${OPASSWORD} ${ODOMAIN} -g${screensize} -a16 -rsound -kfr-ch ${ADDRESS} -D -z $CACHE -N -xl -r "disk:${USER}=${HOME}" -r "clipboard:PRIMARYCLIPBOARD" ${CONSOLE} &
        ;;

      VNC)
        $VNCVIEWER -name "${ALIAS}" -geometry ${screensize} ${ADDRESS} &
        ;;

      SSH)
        CN=${USERNAME}@${ADDRESS}

        if [ -z "${OUSERNAME}" ]
        then
          CN=${ADDRESS}
        fi

        if [ -z "$OPASSWORD" ]
        then
          $TERMINAL --name "${ALIAS}" --tab --command "$SSH -o StrictHostKeyChecking=no \"$CN\"" &
        else
          $SSHPASS $OPASSWORD $SSHCOPYID -o StrictHostKeyChecking=no "$CN" 2>/dev/null
          $TERMINAL --name "${ALIAS}" --tab --command "$SSHPASS $OPASSWORD $SSH -o StrictHostKeyChecking=no \"$CN\"" &
        fi
        ;;
    esac
  else
    MSG="Unable to open connection to machine '$ALIAS' because '$ADDRESS' is not responding."
    echo "$MSG" >&2
    [ "$INTERACTIVE" -eq 0 ] && $NOTIFYSEND --urgency=low --icon=error --app-name=rdp "$MSG"
    return 1
  fi

  return 0
}

list()
{
  echo "Available displays:"
  $XRANDR -q | grep -w connected | sed -n "s/^\([^[:space:]]*\)[[:space:]]*connected[[:space:]]*\(primary\)\?[[:space:]]*\([0-9]*x[0-9]*+[0-9]*+[0-9]*\).*/\t\1\t-->\t\3\t\2/p"
  echo
  echo "Available environments:"
  ls -1 ${CONF_DIR}/*.conf | while read f; do echo "$(basename "$f" .conf)"; done | sort -u
}

startConnection()
{
  local MENU="$1"
  local ALIAS="$2"
  local PROTOCOL="$3"
  local USERNAME="$4"
  local PASSWORD="$5"
  local DOMAIN="$6"
  local ADDRESS="$7"
  local MAC="$8"
  local AUTOPASS="$9"
  local LOCALNET="${10}"
  local NOCACHE="${11}"
  local SCREENSIZE="${12}"

  if [ -z "$USERNAME" ]
  then
    if [ "$PROTOCOL" == "RDP" ]
    then
      OUSERNAME="-u$($GXMESSAGE -center -title "$ALIAS" -entry "Username")"
    else
      OUSERNAME=""
    fi
  else
    OUSERNAME="-u$USERNAME"
  fi

  if [ "$AUTOPASS" == "true" ]
  then
    OPASSWORD="-p$(sed -n "s/password=\(.*\)/\1/p" ${SECURE_DIR}/rdp.conf)"
  elif [ -z "$PASSWORD" ]
  then
    if [ "$PROTOCOL" == "RDP" ]
    then
      OPASSWORD="-p$($GXMESSAGE -center -title "$ALIAS" -entry "Password for user ${OUSERNAME:2}")"
    else
      OPASSWORD=""
    fi
  else
    OPASSWORD="-p$PASSWORD"
  fi

  if [ -z "$DOMAIN" ]
  then
    ODOMAIN=""
  else
    ODOMAIN="-d$DOMAIN"
  fi

  IP_ADDRESS=$(ping -q -c 1 "$ADDRESS" \
               | head -1 \
               | sed "s/[^(]*(\([0-9.]\+\)).*/\1/g")

  if [ ! -z "$MAC" ]
  then
    [ "$LOCALNET" == "true" ]
    checkMac "$MAC" $?
  else
    MAC=$(getMac)
  fi

  if [ ! -z "$ADDRESS" ]
  then
    [ "$NOCACHE" == "true" ]
    startViewer $? "${SCREENSIZE}"
  fi

  return 0
}

getMachines()
{
  local MENUS="$1"
  local ALIAS="${2:-.*}"
  local USERNAME="${3}"

  for m in $MENUS
  do
    for a in $($CRUDINI --get "${CONF_DIR}/${m}.conf" 2>/dev/null \
               | grep -w "$ALIAS")
    do
      if [ ! -z "$USERNAME" ]
      then
        $CRUDINI --get "${CONF_DIR}/${m}.conf" "${a}" username 2>/dev/null \
        | grep -wq "$USERNAME"
        if [ $? -eq 0 ]
        then
          echo "$m $a"
        fi
      else
        echo "$m $a"
      fi
    done
  done

  return 0
}

if [ -z "$DISPLAY" ]
then
  echo >&2
  echo "Can't open display" >&2
  echo >&2
  exit 3
fi

unset SIZE
unset CONSOLE

ALIAS=""
USERNAME=""
MENUALIAS=""
ALLMENU=0

while getopts "h0wulfs:p:a" opt
do
  case $opt in
    f) RDP_TOP_PANEL=( 0 0 )
       RDP_BOTTOM_PANEL=( 0 0 )
       ;;

    w) SIZE=$(getGeometry full 0)
       ;;

    0) CONSOLE="-0"
       ;;

    u) regenerate
       exit 0
       ;;

    a) ALLMENU=1
       ;;

    s) SIZE=$(getGeometry $OPTARG 0)

       if [ -z "$SIZE" ]
       then
         help "Display $OPTARG not found"
       fi
       ;;

    l) list
       exit 0
       ;;

    p) position=$(echo "$OPTARG" | sed -n "s/^\([0-9]*\)$/\1/p")

       if [ -z "$position" ]
       then
         help "Invalid position specified: $position"
       fi

       SIZE=$(getGeometry "" $position)
       ;;

    h) help
       ;;

    \?) help "Unknown option"
        ;;
  esac
done

shift $((OPTIND-1))

if [ $ALLMENU -eq 0 ]
then
  ALIAS="$1"
  USERNAME="$2"

  if [ -z "${ALIAS}" ]
  then
    help "Missing machine alias"
  fi
else
  MENUALIAS="$1"

  if [ -z "${MENUALIAS}" ]
  then
    help "Missing menu name"
  fi
fi

if [ -z "$SIZE" ]
then
  SIZE=$(getGeometry "" 0)
fi

ACCESS="$(stat -c %a "${CONF_DIR}")"

if [ "${ACCESS:1}" -ne "00" ]
then
  MSG="The access right on ${CONF_DIR} are too permissive."
  echo "$MSG" >&2
  [ "$INTERACTIVE" -eq 0 ] && $NOTIFYSEND --urgency=low --icon=error --app-name=rdp "$MSG"
  exit 4
fi

if [ -z "$MENUALIAS" ]
then
  MENUS=$(ls -1 ${CONF_DIR}/*.conf | while read f; do echo "$(basename "$f" .conf)"; done | sort -u)
else
  MENUS="$MENUALIAS"
fi

LIST=$(getMachines "$MENUS" "$ALIAS" "$USERNAME")

if [ -z "${LIST}" ]
then
  help "No machine found corresponding criteria"
fi

echo
echo "Screen position: $SIZE"
echo
echo "Found $(echo ${LIST} | wc -l) machine(s) matching:"
echo "$LIST" | while read MENU ALIAS; do echo "$ALIAS"; done
echo

# remove old cache stale files (if present)
\rm -f $(fuser -a -u ~/.rdesktop/cache/pstcache* 2>&1 | \grep -v "(${USER})$" | \sed "s/:$//g")

echo "$LIST" \
| while read MENU ALIAS
do
  PROTOCOL="$($CRUDINI --get "${CONF_DIR}/${MENU}.conf" "$ALIAS" protocol 2>/dev/null)"
  USERNAME="$($CRUDINI --get "${CONF_DIR}/${MENU}.conf" "$ALIAS" username 2>/dev/null)"
  PASSWORD="$($CRUDINI --get "${CONF_DIR}/${MENU}.conf" "$ALIAS" password 2>/dev/null)"
  DOMAIN="$($CRUDINI --get "${CONF_DIR}/${MENU}.conf" "$ALIAS" domain 2>/dev/null)"
  ADDRESS="$($CRUDINI --get "${CONF_DIR}/${MENU}.conf" "$ALIAS" address 2>/dev/null)"
  MAC="$($CRUDINI --get "${CONF_DIR}/${MENU}.conf" "$ALIAS" mac 2>/dev/null)"
  AUTOPASS="$($CRUDINI --get "${CONF_DIR}/${MENU}.conf" "$ALIAS" autopass 2>/dev/null)"
  LOCALNET="$($CRUDINI --get "${CONF_DIR}/${MENU}.conf" "$ALIAS" localnet 2>/dev/null)"
  NOCACHE="$($CRUDINI --get "${CONF_DIR}/${MENU}.conf" "$ALIAS" nocache 2>/dev/null)"
  SCREENSIZE="$($CRUDINI --get "${CONF_DIR}/${MENU}.conf" "$ALIAS" screensize 2>/dev/null)"

  (
    startConnection "${MENU}" "${ALIAS}" "${PROTOCOL}" "${USERNAME}" "${PASSWORD}" "${DOMAIN}" "${ADDRESS}" "${MAC}" "${AUTOPASS}" "${LOCALNET}" "${NOCACHE}" "${SCREENSIZE}"

    status=$?

    if [ $status -eq 0 ]
    then
      echo -e "\e[32mOK\e[0m"
    else
      echo -e "\e[31mNOK [Status: $status]\e[0m"
    fi
  ) &

  sleep 1
done

wait
